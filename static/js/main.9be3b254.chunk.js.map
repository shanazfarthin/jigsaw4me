{"version":3,"sources":["PuzzleBoard.js","App.js","index.js"],"names":["PuzzlePiece","_ref","piece","index","onDragStart","onDrop","_jsx","className","draggable","e","onDragOver","preventDefault","children","src","alt","concat","PuzzleBoard","image","setImage","useState","pieces","setPieces","shuffledPieces","setShuffledPieces","isPuzzleSolved","setIsPuzzleSolved","timeSpent","setTimeSpent","timer","setTimer","isTimerRunning","setIsTimerRunning","canvasRef","useRef","timerRef","sliceImage","img","canvas","current","ctx","getContext","pieceWidth","width","pieceHeight","height","piecesArray","y","x","clearRect","drawImage","push","toDataURL","shuffleArray","array","shuffled","i","length","j","Math","floor","random","handleDragStart","dataTransfer","setData","setInterval","prevTime","handleDrop","dropIndex","dragIndex","parseInt","getData","newShuffledPieces","checkPuzzleSolved","currentPieces","JSON","stringify","clearInterval","useEffect","_jsxs","type","onChange","uploadedImage","target","files","Image","URL","createObjectURL","onload","map","onClick","handlePlayAgain","ref","style","display","App","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.9be3b254.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport './PuzzleBoard.css'; // Assuming you have a separate CSS for PuzzleBoard\r\n\r\nconst PuzzlePiece = ({ piece, index, onDragStart, onDrop }) => {\r\n  return (\r\n    <div\r\n      className=\"PuzzlePiece\"\r\n      draggable\r\n      onDragStart={(e) => onDragStart(e, index)}\r\n      onDrop={(e) => onDrop(e, index)}\r\n      onDragOver={(e) => e.preventDefault()} // Allow dropping\r\n    >\r\n      <img src={piece} alt={`Puzzle piece ${index}`} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PuzzleBoard = () => {\r\n  const [image, setImage] = useState(null);\r\n  const [pieces, setPieces] = useState([]);\r\n  const [shuffledPieces, setShuffledPieces] = useState([]);\r\n  const [isPuzzleSolved, setIsPuzzleSolved] = useState(false);\r\n  const [timeSpent, setTimeSpent] = useState(0);\r\n  const [timer, setTimer] = useState(0); // Timer starts from 0 and counts up\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  const canvasRef = useRef(null);\r\n  const timerRef = useRef(null);\r\n\r\n  const startTimer = () => {\r\n    if (!isTimerRunning) {\r\n      setIsTimerRunning(true);\r\n      timerRef.current = setInterval(() => {\r\n        setTimer((prevTime) => prevTime + 1);\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    clearInterval(timerRef.current);\r\n    setIsTimerRunning(false);\r\n  };\r\n\r\n  const handleImageUpload = (e) => {\r\n    const uploadedImage = e.target.files[0];\r\n    if (uploadedImage) {\r\n      const img = new Image();\r\n      img.src = URL.createObjectURL(uploadedImage);\r\n      img.onload = () => {\r\n        setImage(img);\r\n        sliceImage(img);\r\n      };\r\n    }\r\n  };\r\n\r\n  const sliceImage = (img) => {\r\n    const canvas = canvasRef.current;\r\n    if (canvas) {\r\n      const ctx = canvas.getContext('2d');\r\n      const pieceWidth = img.width / 4;\r\n      const pieceHeight = img.height / 4;\r\n\r\n      const piecesArray = [];\r\n      canvas.width = pieceWidth;\r\n      canvas.height = pieceHeight;\r\n\r\n      for (let y = 0; y < 4; y++) {\r\n        for (let x = 0; x < 4; x++) {\r\n          ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n          ctx.drawImage(\r\n            img,\r\n            x * pieceWidth,\r\n            y * pieceHeight,\r\n            pieceWidth,\r\n            pieceHeight,\r\n            0,\r\n            0,\r\n            pieceWidth,\r\n            pieceHeight\r\n          );\r\n          piecesArray.push(canvas.toDataURL());\r\n        }\r\n      }\r\n\r\n      setPieces(piecesArray);\r\n      setShuffledPieces(shuffleArray(piecesArray));\r\n    }\r\n  };\r\n\r\n  const shuffleArray = (array) => {\r\n    const shuffled = [...array];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n  };\r\n\r\n  const handleDragStart = (e, index) => {\r\n    e.dataTransfer.setData('pieceIndex', index);\r\n    if (!isTimerRunning) startTimer();\r\n  };\r\n\r\n  const handleDrop = (e, dropIndex) => {\r\n    const dragIndex = parseInt(e.dataTransfer.getData('pieceIndex'), 10);\r\n\r\n    if (dragIndex === dropIndex) return;\r\n\r\n    const newShuffledPieces = [...shuffledPieces];\r\n    [newShuffledPieces[dragIndex], newShuffledPieces[dropIndex]] = [\r\n      newShuffledPieces[dropIndex],\r\n      newShuffledPieces[dragIndex],\r\n    ];\r\n\r\n    setShuffledPieces(newShuffledPieces);\r\n    checkPuzzleSolved(newShuffledPieces);\r\n  };\r\n\r\n  const checkPuzzleSolved = (currentPieces) => {\r\n    if (JSON.stringify(currentPieces) === JSON.stringify(pieces)) {\r\n      setIsPuzzleSolved(true);\r\n      stopTimer();\r\n      setTimeSpent(timer); // Record the time spent\r\n    }\r\n  };\r\n\r\n  const handlePlayAgain = () => {\r\n    setImage(null);\r\n    setPieces([]);\r\n    setShuffledPieces([]);\r\n    setIsPuzzleSolved(false);\r\n    setTimer(0);\r\n    setTimeSpent(0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearInterval(timerRef.current);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"PuzzleContainer\">\r\n      <div className=\"center\">\r\n        {!image && <div className=\"animatedMessage\">Insert your image here</div>}\r\n        {!image && <input type=\"file\" onChange={handleImageUpload} />}\r\n      </div>\r\n      <div className=\"PuzzleBoard\">\r\n        <div className=\"PuzzleGrid\">\r\n          {shuffledPieces.map((piece, index) => (\r\n            <PuzzlePiece\r\n              key={index}\r\n              piece={piece}\r\n              index={index}\r\n              onDragStart={handleDragStart}\r\n              onDrop={handleDrop}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"RightSide\">\r\n        {image && <img src={image.src} alt=\"Original uploaded\" />}\r\n        {isPuzzleSolved && (\r\n          <div className=\"CompletionMessage\">\r\n            <h3>Congratulations!</h3>\r\n            <p>\r\n            You have spent <b>{timeSpent}</b> seconds to complete the puzzle.\r\n          </p>\r\n            <button onClick={handlePlayAgain}>Play Again</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <canvas ref={canvasRef} style={{ display: 'none' }}></canvas>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PuzzleBoard;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport PuzzleBoard from './PuzzleBoard'; // Import PuzzleBoard\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Welcome to the Jigsaw Puzzle Game!</h1>\r\n       <h2>Your favorite image to explore jigsaw.</h2>\r\n      <PuzzleBoard /> {/* Render the PuzzleBoard component */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App'; // Importing your App component\r\n\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}